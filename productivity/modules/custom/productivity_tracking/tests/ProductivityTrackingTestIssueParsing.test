<?php
/**
 * Created by PhpStorm.
 * User: brice
 * Date: 03/04/2017
 * Time: 3:36 PM
 */

/**
 * Tests the functionality of the Simpletest example content type.
 */
class ProductivityTrackingTestIssueParsing extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Issue parsing',
      'description' => 'Parse title of issue for info',
      'group' => 'Productivity',
    );
  }

  public function setUp() {
    $this->profile = 'productivity';

    parent::setUp();
  }

  public function testTitleParsingEstimation() {

    $strings = [
      ['1', "Create a view of the team members [1]"],
      ['12', "Create a view of the team members [12]"],
      ['12.2', "Create a view of the team members [12.2] and some text here"],
      ['1', "Create a view of the team members [1h]"],
      ['120', "Create a view of the team members [120h]"],
      ['1', "Create a view of the team members [1H]"],
      ['12', "Create a view of the team members [12H]"],
      ['12.2', "Create a view of the team members [12.2h]"],
      ['1.2', "Create a view of the team members [1.2h]"],
      ['12.2', "Create a view of the team members [12.2H] and some text here"],
      ['1.1', "Create a view of the team members [1.1H] and some text here"],
    ];
    foreach ($strings as $string) {
      $estimate = productivity_tracking_parse_time_estimate($string[1]);
      $this->assertEqual($string[0], $estimate, '', 'Productivity');
    }
  }

  // Check the issue is created on payload push.
  public function testPayloadIssue() {
    $path = drupal_get_path('module', 'productivity_tracking') . '/tests/json/';
    $json = file_get_contents($path . 'issuePayload.json');
    $payload = json_decode($json, TRUE);

    $user1 = $this->drupalCreateUser();
    $user1->field_github_username['und']['0']['value'] = 'ordavidil';
    user_save($user1);
    $settings = array(
      'type' => 'project',
      'title' => 'Productivity',
      'field_github_repository_name' => array(LANGUAGE_NONE => array(array('value' => 'Gizra/productivity'))),
    );
    $project_node = $this->drupalCreateNode($settings);

    productivity_tracking_gh_payload($payload, 'issues');

    $data['repo'] = $payload['repository']['full_name'];
    $data['issue'] = $payload['issue'];
    $wrapper = productivity_tracking_get_tracking_node($data, FALSE, TRUE, FALSE);
    $this->assertEqual($wrapper->field_time_estimate->value(), '3.5', 'Estimate saved correctly', 'Productivity');
    $this->assertEqual($wrapper->field_project->label(), 'Productivity', 'Project saved correctly', 'Productivity');
    $this->assertEqual($wrapper->body->value->value(), 'Create a view of the team members [3.5h]', 'Body saved correctly', 'Productivity');
    $this->assertEqual($wrapper->field_github_project_id->value(), 'Gizra/productivity', 'Repo saved correctly', 'Productivity');
    $this->assertEqual($wrapper->field_issue_id->value(), '31', 'Issue number saved correctly', 'Productivity');
    $this->assertEqual($wrapper->field_issue_status->label(), 'open', 'Status saved correctly', 'Productivity');
    $this->assertEqual($wrapper->field_gh_label[0]->label(), 'Drupal', 'Label saved correctly', 'Productivity');
    $this->assertEqual($wrapper->field_gh_milestone->label(), 'POC', 'Milestone saved correctly', 'Productivity');
  }
}