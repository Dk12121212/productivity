<?php
/**
 * @file
 * Code for the Productivity project feature.
 */

include_once 'productivity_project.features.inc';

/**
 * Implements hook_menu().
 */
function productivity_project_menu() {
  $items['recalculate-project-time/%node'] = array(
    'page callback' => 'productivity_project_recalculate_hours',
    'page arguments' => array(1),
    'access callback' => 'productivity_project_recalculate_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['recalculate-project-time/%node/%'] = array(
    'page callback' => 'productivity_project_recalculate_hours',
    'page arguments' => array(1, 2),
    'access callback' => 'productivity_project_recalculate_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['repository_autocomplete'] = array(
    'page callback' => 'productivity_project_repository_autocomplete',
    'access callback' => TRUE,
  );

  $items['repository_autocomplete_invalidate'] = array(
    'page callback' => 'productivity_project_repository_autocomplete_invalidate',
    'access callback' => TRUE,
  );

  $items['node/%node/acceptance'] = array(
    'title' => t('Acceptance Test'),
    'page callback' => 'productivity_project_page_acceptance',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['node/%node/project-work-report'] = array(
    'title' => t('Tracking report (summary)'),
    'page callback' => 'productivity_time_tracking_project_table',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => -10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'productivity_tracking') . '/project_report',
    'file' => '/project_report.inc',
  );

  $items['node/%node/acceptance/post'] = array(
    'page callback' => 'productivity_project_page_acceptance_post',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
  );

  return $items;
}

/**
 * @param $node
 */
function productivity_project_page_acceptance_post($node) {
  $saved_data = array();
  foreach ($_POST as $key => $data) {
    $keys = explode('-', $key);
    $saved_data[$keys[0]][$keys[1]] = $data;
  }
  $all_done = TRUE;
  foreach ($saved_data as $key => $data) {
    if ($data['status'] == '0') {
      $all_done = FALSE;
    }
  }
  // Save date if all done.
  if ($all_done) {
    variable_set('project_acceptance_date' . $node->nid, time());
  }
  variable_set('project_acceptance_' . $node->nid, $saved_data);
  drupal_json_output('TRUE');
}

/**
 * @param $node
 * @return string
 */
function productivity_project_page_acceptance($node) {
  $nid = $node->nid;
  drupal_add_js(array('submitAcceptanceURL' => base_path() . "node/$nid/acceptance/post"), 'setting');
  $variables = array();

  // Data labels.
  $default_names = array(
    'AutomaticTest' => array('display_name' => 'Automatic Test'),
    'ManualTest' => array('display_name' => 'Manual Test'),
    'ReleaseProtocol' => array('display_name' => 'Release Protocol'),
    'Servers' => array('display_name' => 'Servers'),
    'Payments' => array('display_name' => 'Payments'),
    'HandoverMeeting' => array('display_name' => 'Handover Meeting'),
  );
  // Default arrays.
  $data = array(
    'status' => 0,
    'uid' => 0,
  );
  $default = array();
  foreach ($default_names as $key => $value) {
    $default[$key] = $data;
  }
  // Statuses.
  $status = array(
    'TPD',
    'Done',
  );

  $variables['rows'] = '';
  $variables['date'] = variable_get('project_acceptance_date' . $node->nid, FALSE);
  $variables['date'] = $variables['date'] ? date('Y-M-d', $variables['date']) : "";
  $project_data = variable_get('project_acceptance_' . $node->nid, $default);
  $project_data = array_merge_recursive($project_data, $default_names);
  $users = productivity_account_get_employees_list();
  // Build for inside table.
  foreach ($project_data as $key => $row) {
    $select_user = theme('select', array(
        'element' => array(
          '#options' => $users,
          '#value' => $row['uid'],
          '#id' => $key . '-uid',
        )
      )
    );
    $select_status = theme('select',
      array(
        'element' => array(
          '#options' => $status,
          '#value' => $row['status'],
          '#id' => $key . '-status',
        ),
      )
    );
    $title = $row['display_name'];
    $variables['rows'] .= "<tr><td>$title</td><td>$select_status</td><td>$select_user</td></tr>";
  }
  return theme('acceptance_test', $variables);
}

/**
 * Implements hook_theme().
 */
function productivity_project_theme() {
  return array(
    'acceptance_test' => array(
      'variables' => array(
        'project_title' => NULL,
      ),
      'path' => drupal_get_path('module', 'productivity_project'),
      'template' => 'acceptance_test',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function productivity_project_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Access callback; Check permissions for user and the bundle of the entity.
 *
 * @param object $node
 *  The entity.
 * @return bool
 *
 */
function productivity_project_recalculate_access($node) {
  if (!user_access('administer nodes')) {
    return FALSE;
  }

  if ($node->type != 'project') {
    return FALSE;
  }
  return TRUE;
}

/**
 * Page callback; Recalculates the total hours and days of a project from the beginning of time.
 *
 * @param $node
 *  The "project" entity that needs hours recalculation.
 *
 * @param $type
 *  Recalculate only for one specific work type.
 */
function productivity_project_recalculate_hours($node, $type = FALSE) {
  $wrapper = entity_metadata_wrapper('node', $node);

  if (!$type) {
    $total = productivity_time_tracking_total_hours($wrapper->getIdentifier());
    $wrapper->field_hours->set($total['hour']);
  }
  else {
    $rate = productivity_project_check_existing_type($wrapper->field_table_rate, $type);
    if ($rate) {
      $total = productivity_project_recalcualte_rate_total_hours($wrapper->getIdentifier(), $type);
      $node->field_table_rate['und'][$rate['key']]['field_hours']['und'][0]['value'] = $total;
    }
  }

  $wrapper->save();

  drupal_goto('node/' . $node->nid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disables the hours and days fields in Project's node edit form.
 */
function productivity_project_form_project_node_form_alter(&$form, &$form_state) {
  // Disable auto generated fields
  $form['field_hours']['#disabled'] = TRUE;
  foreach ($form['field_table_rate']['und'] as &$field_hours) {
    if (isset($field_hours['#field_name'])) {
      $field_hours['field_hours']['#disabled'] = TRUE;
    }
  }

  $form['field_percentage_notification']['#disabled'] = TRUE;

  // Set the repo name as autocomplete.
  foreach ($form['field_github_repository_name'][LANGUAGE_NONE] as &$element) {
    if (empty($element['value'])) {
      continue;
    }
    $element['value']['#autocomplete_path'] = 'repository_autocomplete';
  }

  $form['field_github_repository_name']['#prefix'] = l(t('Invalidate list of repositories'), 'repository_autocomplete_invalidate', array('query' => array('destination' => $_GET['q'])));
}

/**
 * Notify site managers about logged hours percentage in a project.
 *
 * The notifications percentage thresholds: 25%, 50%, 75%, 95%, 100%.
 * Calculates the percentage from the scope,
 * Checks if the project has reached a new threshold,
 * Sends a message with project details and hours percentage logged.
 *
 * @param object $node
 *  The project node.
 *
 * @return boolean
 *  Returns FALSE only if the scope is not relevant.
 *
 */
function productivity_project_logged_hours_notify($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  // Get the total scope (normalized as hours) , including all rate types.
  $total_scope = productivity_project_get_total_scope($wrapper);

  $total_hours = $wrapper->field_hours->value();

  // Calculate the project's percentage of logged hours.
  $total_percentage = number_format(($total_hours / $total_scope) * 100, 2);

  // Send only if the project reached a new threshold and the managers were
  // never notified about it.
  $arguments = array(
    '@project_name' => $wrapper->label(),
    '@logged_percentage' => $total_percentage,
    '@project_scope' => t('@total_scope Hours', array('@total_scope' => $total_scope)),
    '@project_total_hours' => $total_hours,
    '@project_total_days' => productivity_project_get_total_days($total_hours),
    '@work_type' => 'Total Scope',
  );
  productivity_project_notify($wrapper, $arguments);

  // Check scope for each type
  foreach ($wrapper->field_table_rate as $rate) {
    $hours = $rate->field_hours->value();
    $scope = productivity_project_normalize_scope($rate);
    $scope_percentage = 0;
    if ($scope != 0) {
      $scope_percentage = number_format(($hours / $scope) * 100, 2);
    }

    $arguments = array(
      '@project_name' => $wrapper->label(),
      '@logged_percentage' => $scope_percentage,
      '@project_scope' => t('@scope Hours', array('@scope' => $scope)),
      '@project_total_hours' => $hours,
      '@project_total_days' => productivity_project_get_total_days($hours),
      '@work_type' => $rate->field_issue_type->label(),
    );

    productivity_project_notify($wrapper, $arguments);
  }
}

/**
 * Actual notify logged hours percentage in a project or a scope.
 *
 * Checks if the project has reached a new threshold,
 * and send a message with project or scope details.
 *
 * @param $wrapper_project
 *  The project wrapper.
 * @param $arguments
 *  The email arguments.
 */
function productivity_project_notify($wrapper_project, $arguments) {
  // Notification thresholds.
  $thresholds = array(
    '100',
    '95',
    '75',
    '50',
    '25',
  );

  $percentage = $arguments['@logged_percentage'];
  $percentage_notified = $wrapper_project->field_percentage_notification->value();

  foreach ($thresholds as $threshold) {
    if ($percentage < $threshold || $percentage_notified >= $threshold || $percentage < $percentage_notified) {
      // Didn't reach a threshold OR This threshold has been already notified or
      // The current percentage has been already notified.
      continue;
    }

    // Create a message for owners.
    $values = array(
      'uid' => 1,
      'arguments' => $arguments,
    );
    $message = message_create('logged_project_hours', $values);

    // Send the message to the owners.
    $options = array(
      'mail' => variable_get('productivity_time_tracking_managers_email', 'info@gizra.com'),
    );
    message_notify_send_message($message, $options);

    // Send notifications to all the team leads as well.
    if ($wrapper_project->field_team_leads->value()) {
      foreach ($wrapper_project->field_team_leads as $team_lead) {
        // Create a new message specified to the team lead.
        $values['uid'] = $team_lead->getIdentifier();
        $message = message_create('logged_project_hours', $values);
        // Send this message to the team lead.
        $options['mail'] = $team_lead->mail->value();
        message_notify_send_message($message, $options);
      }
    }

    // Save the percentage so it won't send the same.
    // message again at this threshold.
    $wrapper_project->field_percentage_notification->set($percentage);
    $wrapper_project->save();
    // Stop this loop when one notifications has been sent.
    break;
  }
}

/**
 * Get the Total project scope.
 *
 * @param $project_wrapper
 *  The project node wrapper.
 *
 * @param $work_type
 *  Get normalized scope for the specific work typ only.
 *
 * @return double
 *  Scope normalized to hours
 */
function productivity_project_get_total_scope($project_wrapper, $work_type = FALSE) {
  $total = 0;
  foreach ($project_wrapper->field_table_rate as $rate) {
    if ($work_type && $rate->field_issue_type->value() != $work_type) {
      continue;
    }
    // TODO: Maybe don't count non-billable scope here ?
    $total += productivity_project_normalize_scope($rate);
  }
  return $total;
}

/**
 * Convert the rate scope to hours.
 *
 * @param $rate
 *  The rate wrapper.
 *
 * @return double
 *  Total scope in hours.
 */
function productivity_project_normalize_scope($rate) {
  $hours_per_day = 1;
  if ($rate->field_scope->period == 'day') {
    // Calculate the scope as hours, when saved as days.
    $hours_per_day = variable_get('productivity_time_tracking_hours_count_as_day', 8);
  }
  return ($rate->field_scope->interval->value() * $hours_per_day);
}

/**
 * Page callback; Return list of the repositories for easy project creation.
 */
function productivity_project_repository_autocomplete($string = '') {

  $repositories = _productivity_project_build_repo_list();

  $results = array();
  foreach ($repositories as $full_name => $name) {
    if ($string && strpos($name, $string) !== FALSE) {
      $results[$full_name] = $name;
    }
  }

  drupal_json_output($results);
}

/**
 * Github API don't allow us search against repos. name. This API function will
 * build a cached version that will be invalidate each day or by a click of a
 * button.
 *
 * @return array
 *   Array of repository name as the key and the full name as the value.
 */
function _productivity_project_build_repo_list() {
  if (!productivity_project_repository_autocomplete_need_invalidate() && $results = variable_get('productivity_project_repositories')) {
    // Return the cached lists of projects.
    return $results;
  }

  $address = 'https://api.github.com/orgs/gizra/repos';
  $results = array();

  list($public, $secret) = array(
    variable_get('github_public'),
    variable_get('github_secret')
  );
  if ($public && $secret) {
    $query = '?client_id=' . $public . '&client_secret=' . $secret . '&page=';
  }
  else {
    $query = '?page=';
  }

  $i = 1;
  while (TRUE) {
    // Get the results for the current pagination.
    $data = drupal_http_request($address . $query . $i);

    $output = drupal_json_decode($data->data);

    if ($data->code != 200) {
      $params['@error'] = implode(' ', $output);
      $message = t('There was a problem requesting the repositories: @error', $params);
      drupal_set_message($message, 'error');
      watchdog('productivity_project', $message);
      break;
    }

    if (!$output) {
      // No more repositories. Break the loop.
      break;
    }

    foreach ($output as $repository) {
      $results[$repository['full_name']] = $repository['name'];
    }

    $i++;
  }

  variable_set('productivity_project_repositories', $results);
  variable_set('productivity_project_repositories_defined', time());
  return $results;
}

/**
 * Invalidating the list of projects.
 */
function productivity_project_repository_autocomplete_invalidate() {
  variable_set('productivity_project_repositories', NULL);
  drupal_set_message(t('The repositories list has been invalidated.'));
  $destination = !empty($_GET['destination']) ? $_GET['destination'] : '<front>';
  drupal_goto($destination);
}

/**
 * Check if we need to invalidate the repositories lists.
 *
 * @return boolean
 */
function productivity_project_repository_autocomplete_need_invalidate() {
  return REQUEST_TIME - variable_get('productivity_project_repositories_defined') >= 86400;
}

/**
 * Update scope days and scope hours if day type is regular.
 *
 * Build the scope multi field table,
 * Called every time new issue is create or update.
 *
 * @param $wrapper_time_tracking
 *  Time tracking node wrapper.
 *
 * @param $delete
 *  Case deleting a time tracking.
 *
 * @return string $issue_type
 *  The issue type.
 */
function productivity_project_update_project_total_hours($wrapper_time_tracking, $delete = FALSE) {
  $project_wrapper = $wrapper_time_tracking->field_project;

  // Add the hours by work type (qa, dev, management..).
  if ($wrapper_time_tracking->field_day_type->value() == "regular") {

    // Validates that the node has a project associated with it
    $node_project = $project_wrapper->value();
    if (!$node_project) {
      return FALSE;
    }

    // Summarize all total here.
    $node = $wrapper_time_tracking->value();
    $total_work_new = productivity_time_tracking_node_total_hours($node);
    $types = $total_work_new['types'];

    // Only enter if the node isn't new (Updated / Deleted)
    if ((isset($node->is_new) && !$node->is_new) || $delete) {
      // If doesn't have an original property, this node is being deleted.
      $node_original = isset($node->original) ? $node->original : $node;

      $total_work_original = productivity_time_tracking_node_total_hours($node_original);
      $types += $total_work_original['types'];
    }

    // Save totals on project node.
    $total_diff = 0;
    $project_rates = isset($project_wrapper->field_table_rate) ? $project_wrapper->field_table_rate : array();
    // Count new types add in this node save.
    $new_types_count = 0;
    // Go over all types, original and new.
    foreach ($types as $type) {

      if (!$delete) {
        $original_hours = isset($total_work_original['total'][$type]) ? $total_work_original['total'][$type] : 0;
        $hours = isset($total_work_new['total'][$type]) ? $total_work_new['total'][$type] : 0;
        $diff = $hours - $original_hours;

        // Create rate type on the project if does not exist yet.
        if (!$rate = productivity_project_check_existing_type($project_rates, $type)) {
          // Create new row for the issue type at the table.
          $index = count($project_rates) + $new_types_count;
          $new_rate_structure = productivity_project_create_new_type($index, $hours, $type);
          $node_project->field_table_rate['und'] += $new_rate_structure;
          $new_types_count++;
        }

        else {
          // Save diff to existing type.
          $node_project->field_table_rate['und'][$rate['key']]['field_hours']['und'][0]['value'] += $diff;
        }
        $total_diff += $diff;
      }

      // Node is being deleted, means it just needs to subtract it's hours from
      // the project's total hours
      else {
        $diff = isset($total_work_original['total'][$type]) ? $total_work_original['total'][$type] : 0;
        $rate = productivity_project_check_existing_type($project_rates, $type);
        $node_project->field_table_rate['und'][$rate['key']]['field_hours']['und'][0]['value'] -= $diff;
        $total_diff -= $diff;
      }
    }

    $total_original_hours = $project_wrapper->field_hours->value();
    $project_wrapper->field_hours->set($total_original_hours + $total_diff);
    $project_wrapper->save();
  }

  return $project_wrapper;
}

/**
 * Recalculate project total hours per rate
 */
function productivity_project_recalcualte_rate_total_hours($project_id, $rate_type = FALSE) {
  $total = 0;
  $result = productivity_project_get_tracking($project_id, $rate_type);
  // Read result a sum total.
  while ($record = $result->fetchAssoc()) {
    $total += $record['field_issues_logs_field_time_spent_value'];
  }

  return $total;
}

/**
 * Recalculate project total hours per rate
 *
 * TODO: Deprecated.
 */
function productivity_project_get_tracking($project_id, $rate_type = FALSE) {
  // Get all work done in a project and specific type.
  $query = db_select('field_data_field_issues_logs', 'il');
  $query->join('field_data_field_project', 'p', 'il.entity_id = p.entity_id');
  $query->join('field_data_field_employee', 'e', 'il.entity_id = e.entity_id');
  $query->join('field_data_field_work_date', 'd', 'il.entity_id = d.entity_id');

  $query
    ->fields('il')
    ->fields('e')
    ->fields('d')
    ->condition('p.field_project_target_id', $project_id)
    ->condition('il.bundle', 'time_tracking');

  if ($rate_type) {
    $query->condition('il.field_issues_logs_field_issue_type_value', $rate_type);
  }

  return $query->execute();

}

/**
 * Create a new row at the table for new issue type.
 *
 * @param $rates
 *  Table types array.
 * @param $issue_log
 *  The new type machine name to add.
 *
 * @return mixed
 *  The element with the new rate.
 */
function productivity_project_create_new_type($index, $hours, $type) {
  // Get the index of the issue type in the table.
  $rate = array();
  $rate[$index] = array(
    'field_hours' => array(LANGUAGE_NONE => array(array('value' => $hours))),
    'field_issue_type' => array(LANGUAGE_NONE => array(array('value' => $type))),
    'field_scope' => array(
      LANGUAGE_NONE => array(
        array(
          'interval' => '0',
          'period' => 'hour',
        )
      )
    ),
    'field_type_rate' => array(
      LANGUAGE_NONE => array(
        array(
          'amount' => '0',
          'currency' => 'USD',
        )
      )
    ),
    'field_rate_type' => array(LANGUAGE_NONE => array(array('value' => 'global'))),
  );

  return $rate;
}

/**
 * Check if the rate type already exist in the table rate.
 *
 * Find if the scope type row is already existing in the table rate.
 *
 * @param $rates_wrapper
 *  Multifield types array.
 * @param $issue_type
 *  Type to check.
 *
 * @return
 *  The rate wrapper, or flase if not found.
 */
function productivity_project_check_existing_type($rates_wrapper, $issue_type) {
  foreach ($rates_wrapper as $key => $rate) {
    if ($issue_type == $rate->field_issue_type->value()) {
      return array(
        'entity' => $rate,
        'key' => $key,
      );
    }
  }
  return FALSE;
}

/**
 * Get the total days, for a project.
 */
function productivity_project_get_total_days($hours) {
  return number_format($hours / variable_get('productivity_time_tracking_hours_count_as_day', 8), 2);
}

/**
 * Get all active project title in the given month.
 *
 * @param $month_back
 *  How many month back in time to add to range.
 */
function productivity_project_get_project_by_date($month = FALSE, $year = FALSE, $month_back = FALSE) {
  if (!$month) {
    $month = date('m');
  }
  if (!$year) {
    $year = date('Y');
  }

  $start_timestamp =  $year . '-' . $month. '-01'. ' 00:00:00';
  $end_timestamp = date('Y-m-d 00:00:00', strtotime('+1 month', strtotime($start_timestamp)));

  // Take x month back in time.
  if ($month_back) {
    $start_timestamp = date('Y-m-d 00:00:00', strtotime("first day of -$month_back month"));
  }

  // We need to add a second query since value2 of date has a default of value(1).
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'project')
    ->fieldCondition('field_date', 'value', $end_timestamp, '<')
    ->fieldCondition('field_date', 'value2', $start_timestamp, '>=')
    // When using this tag, date query must be in this order.
    ->addTag('empty_end_date');

  $result = $query->execute();
  if (isset($result['node'])) {
    return productivity_project_titles(array_keys($result['node']));
  }

  return array();
}


/**
 * Get all project title.
 */
function productivity_project_get_projects() {
  // We need to add a second query since value2 of date has a default of value(1).
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'project');
    // When using this tag, date query must be in this order.

  $result = $query->execute();
  if (isset($result['node'])) {
    return productivity_project_titles(array_keys($result['node']));
  }

  return array();

}

/**
 * Get titles of projects, from nids.
 */
function productivity_project_titles($nids = array()) {
  // List of issues for a project nid.
  $query = db_select('node', 'n');

  $query
    ->fields('n', array('nid'))
    ->fields('n', array('title'));

  $query
    ->condition('n.nid', $nids, 'IN')
    ->orderBy('n.title');


  $result = $query->execute()->fetchAllKeyed();

  return $result;
}


/**
 * Get list name of all project
 */
function productivity_project_get_all_projects($active_only = FALSE, $limit = 0) {
  // List of issues for a project nid.
  $query = db_select('node', 'n');

  $node_fields = [
    'd' => 'field_date',
  ];

  foreach ($node_fields as $alias => $field) {
    $query
      ->leftjoin("field_data_$field", $alias, "n.nid = $alias.entity_id");
  }

  $query
    ->fields('n', array('nid'))
    ->fields('n', array('title'));

  if ($limit) {
    $query->range(0, $limit);
  }

  $query
    ->condition('n.type', 'project')
    ->orderBy('n.changed', 'DESC');

  if ($active_only) {
    $query->condition('status', NODE_PUBLISHED);
  }

  $result = $query->execute()->fetchAllKeyed();

  return $result;
}

/**
 * Find the amount of the scope in question.
 *
 * @param $table_rate
 *  The $table_rate scopes.
 * @param $scope_to_find
 *  The string of the scope in question.
 *
 * @return array()
 *  return the scope amount or zero.
 *
 */
function productivity_project_get_rate($project_nid, $work_type) {
  $rate = db_select('field_data_field_table_rate', 'table_rate')
    ->condition('bundle', 'project')
    ->condition('entity_id', $project_nid)
    ->condition('field_table_rate_field_issue_type_value', $work_type)
    ->fields('table_rate')
    ->execute()
    ->fetchAssoc();

  if ($rate['field_table_rate_field_issue_type_label_value']) {
    // Custom name.
    $display_name = $rate['field_table_rate_field_issue_type_label_value'];
  }
  else {
    // Human readable form field info.
    $field_info = field_info_field('field_issue_type');
    $display_name = $field_info['settings']['allowed_values'][$work_type];
  }

  return array(
    'amount' => $rate['field_table_rate_field_rate_amount'],
    'currency' => $rate['field_table_rate_field_rate_currency'],
    'label' => $display_name,
  );
}

/**
 * Get chart for project hours by developers.
 * @param $node
 *  Project node.
 */
function productivity_project_get_developer_chart($node = NULL) {
  if (!$node || !$node->nid) {
    return;
  }

  $result = productivity_tracking_get_tracking_total($node->nid, FALSE, 'all');
  if (empty($result)) {
    return array();
  }

  $developers = array();
  $developer_hours = array();

  foreach ($result as $uid => $developer_data) {
    $wrapper = entity_metadata_wrapper('user', $uid);
    $developers[] = $wrapper->label();
    $developer_hours[] = floatval($developer_data);
  }

  $chart = array(
    '#type' => 'chart',
    '#title' => t('Hours by developers'),
    '#chart_type' => 'pie',
    '#chart_library' => 'highcharts',
    '#legend_position' => 'right',
    '#data_labels' => FALSE,
    '#tooltips' => TRUE,
  );

  $chart['pie_data'] = array(
    '#type' => 'chart_data',
    '#title' => t('Developer'),
    '#labels' => $developers,
    '#data' => $developer_hours,
  );

  $chart_container['chart'] = $chart;

  return $chart_container;
}

/**
 * Calculate the total project budget.
 */
function productivity_project_get_total_budget($wrapper) {
  $budget = 0;
  foreach ($wrapper->field_table_rate as $rate) {
    if (empty($rate->field_rate->value())) {
      continue;
    }
    $current_rate = $rate->field_rate->amount->value();
    $interval = $rate->field_scope->interval->value();
    $period = $rate->field_rate_type->value();
    // If the budget is per day or per hour, $ is multiplied by the period. Global budgets are not multiplied.
    $budget += ($period == 'hours' || $period == 'days') ? $current_rate * $interval : $current_rate;
    // Assuming all rates are in the same currency.
    $currency = $rate->field_rate->currency->value();
  }

  if (!$budget) {
    return '0';
  }
  return number_format($budget) . ' ' . strtoupper($currency);
}

/**
 * Renders the project total work scope.
 */
function productivity_project_get_scope($wrapper) {
  $scope = 0;
  foreach ($wrapper->field_table_rate as $rate) {
    $scope += $rate->field_scope->interval->value();
  }
  return interval_format_interval(array('period' => 'hour', 'interval' => $scope));
}
