<?php
/**
 * @file
 * Code for the Productivity Github feature.
 */

include_once 'productivity_github.features.inc';

/**
 * Implements hook_menu().
 */
function productivity_github_menu() {
  $items['payload'] = array(
    'page callback' => 'productivity_github_payload',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Create a issue node when a pull request or issue is opened or updated.
 */
function productivity_github_payload() {
  // Verify payload is in the $_POST array.
  $_POST['payload'] = empty($_POST['payload']) ? file_get_contents("php://input") : $_POST['payload'];

  if (variable_get('productivity_debug_payload', FALSE)) {
    // Debug GitHub request.
    $debug_array = array(
      'post' => $_POST,
      'request' => $_REQUEST,
      'server' => $_SERVER,
    );

    watchdog('productivity', 'Github hook activated, data:\n' . print_r($debug_array, TRUE));
  }

  if (empty($_POST['payload'])) {
    return;
  }

  // Debug param, add this to enable local debugging.
  //  $_SERVER['HTTP_X_GITHUB_EVENT'] = 'pull_request';

  $payload = json_decode($_POST['payload']);
  $event = isset($_SERVER['HTTP_X_GITHUB_EVENT']) ? $_SERVER['HTTP_X_GITHUB_EVENT'] : FALSE;

  // Allow only specific events.
  $allowed_events = array(
    'issues',
    'pull_request',
  );
  if (!in_array($event, $allowed_events)) {
    watchdog('productivity', t('A not allowed Github API event of type "@event" from the repository "@repo" was sent.', array(
      '@event' => $event,
      '@repo' => $payload->repository->full_name,
    )));
    return;
  }

  // Allow only company personnel's issues and PRs to be stored.
  if (!$uid = productivity_github_get_uid_by_github_username(check_plain($payload->sender->login))) {
    return;
  }

  $action = $payload->action;

  // Handle the payload in a separate function.
  $function_name = 'productivity_gituhub_payload_handle_' . $event . '_' . $action;
  if (function_exists($function_name)) {
    $function_name($payload, $uid);
  }
}

/**
 * Get user ID from the GitHub username.
 *
 * @param string $github_username
 *   A github username.
 *
 * @return int
 *   Account ID.
 */
function productivity_github_get_uid_by_github_username($github_username) {
  if ($uid = _productivity_github_get_entity_id_by_field_value('field_github_username', 'user', $github_username)) {
    return $uid;
  }

  watchdog('productivity', t('No user with github username: @username', array('@username' => $github_username)));
}

/**
 * Get the project ID from the repository name.
 *
 * @param $repository_info
 *  A github repository names.
 *
 * @return int
 *   Project node ID.
 */
function productivity_github_get_project_by_repository($repository_info) {
  $values = array(
    $repository_info->name,
    $repository_info->owner->login,
    $repository_info->full_name,
  );

  foreach ($values as $value) {
    if ($nid = _productivity_github_get_entity_id_by_field_value('field_github_repository_name', 'project', check_plain($value))) {
      return $nid;
    }
  }
  // Print error if no repo was found.
  watchdog('productivity', t('No project with github repository: @repository', array('@repository' => print_r($repository_info, TRUE))));
  return FALSE;
}

/**
 * Fetch an entity ID by a unique field value.
 *
 * @param $field
 *   Field name.
 * @param $bundle
 *   Entity bundle.
 * @param $value
 *   Field value.
 *
 * @return int
 *   Entity ID.
 */
function _productivity_github_get_entity_id_by_field_value($field, $bundle, $value) {
  // Using db_select to allow this query for anonymous.
  $result = db_select('field_data_' . $field, 'f')
    ->fields('f', array('entity_id'))
    ->condition('bundle', $bundle)
    ->condition($field . '_value', $value)
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  if (!empty($result['entity_id'])) {
    return $result['entity_id'];
  }
}

/**
 * Handle a pull request synchronization.
 *
 * @param object $payload
 *   GitHub payload.
 * @param integer $uid
 *  The employee ID.
 *
 * @see https://developer.github.com/v3/activity/events/types/#pullrequestevent
 */
function productivity_gituhub_payload_handle_pull_request_synchronize($payload, $uid) {
  // We need to check if it's the same user an update the same entity, if it's
  // a different user then we need to create a new entity.
  $nid = productivity_github_get_entity_id_by_push_info($payload, $uid);
  // Update if the entity exists, Create a new entity if a new user has pushed
  // to the pull request.
  productivity_gituhub_payload_handle_pull_request_opened($payload, $uid, $nid);
}

/**
 * Handle a new pull request.
 *
 * @param $payload
 *   GitHub payload.
 * @param integer $uid
 *  The employee ID.
 *
 * @see https://developer.github.com/v3/activity/events/types/#pullrequestevent
 */
function productivity_gituhub_payload_handle_pull_request_opened($payload, $uid, $nid = FALSE) {
  $gh_project_id = $payload->repository->full_name;
  $project_nid = productivity_github_get_project_by_repository($payload->repository);

  // When a PR is opened we need to create a new entity.
  if (!$nid) {
    $node = new stdClass();
    $node->title = $payload->pull_request->title;
    $node->type = 'github_issue';
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;
    $node->status = NODE_PUBLISHED;
    $node->uid = $uid;

    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_employee->set($node->uid);
    $wrapper->field_project->set($project_nid);
    $wrapper->field_issue_id->set((int)$payload->pull_request->number);
    $wrapper->field_push_date->set(array(strtotime($payload->pull_request->updated_at)));
    $wrapper->field_github_content_type->set('pull_request');
    $wrapper->field_github_project_id->set($gh_project_id);

  }
  else {
    // Add push date.
    $wrapper = entity_metadata_wrapper('node', $nid);
    $push_dates = $wrapper->field_push_date->value();
    $push_dates[] = strtotime($payload->repository->pushed_at);
    $wrapper->field_push_date->set($push_dates);
  }



  // Update or create Body.
  $body = $payload->pull_request->body;
  $wrapper->body->value->set($body);
  productivity_github_save_references_issue($wrapper, $body, $gh_project_id, $project_nid);

  $wrapper->save();
}

/**
 * Save references issues, and create stup if non existant.
 */
function productivity_github_save_references_issue($wrapper, $body, $gh_project_id, $project_nid) {
  // Attempt to get an issue numbers.
  $issue_ids = _productivity_github_issue_number_from_body($body);

  $refs = array();
  if ($issue_ids) {
    // Interate through issue number found.
    foreach ($issue_ids[1] as $issue_id) {
      if ($issue_id) {
        // Find a local node for the issue.
        $query = new EntityFieldQuery();
        $result = $query
          ->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'github_issue')
          ->propertyCondition('status', NODE_PUBLISHED)
          ->fieldCondition('field_issue_id', 'value', $issue_id)
          ->fieldCondition('field_github_project_id', 'value', $gh_project_id)
          ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
          ->range(0, 1)
          ->execute();

        if (!empty($result['node'])) {
          $refs[] = key($result['node']);
        }
        else {
          // Create a stub for the missing issue.
          $stub_wrapper = productivity_gituhub_issues_stub($issue_id, $gh_project_id, $project_nid);
          $refs[] = $stub_wrapper->getIdentifier();

          watchdog('productivity', t('Issue id not found, creating stub for: @gh_project_id/issue/@issue_id', array(
            '@gh_project_id' => $gh_project_id,
            '@issue_id' => $issue_id,
            )
          ));
        }
      }
    }
  }
  // Override refs with new one.
  $wrapper->field_issue_reference->set($refs);
}

/**
 * Create an issue stub wrapper.
 *
 * @param $issue_id
 * @param $gh_project_id
 * @param $project_nid
 */
function productivity_gituhub_issues_stub($issue_id, $gh_project_id, $project_nid) {
  $node = new stdClass();
  $node->title = "Issues stub for $gh_project_id/$issue_id";
  $node->type = 'github_issue';
  node_object_prepare($node);

  $node->language = LANGUAGE_NONE;
  $node->status = NODE_PUBLISHED;
  $node->uid = 1;

  $wrapper = entity_metadata_wrapper('node', $node);

  $fields = array(
    'field_employee' => $node->uid,
    'field_project' => $project_nid,
    'field_issue_id' => $issue_id,
    'field_github_project_id' => $gh_project_id,
    'field_github_content_type' => 'issue',
  );

  foreach ($fields as $field_name => $field_value) {
    $wrapper->{$field_name}->set($field_value);
  }


  return $wrapper->save();
}

/**
 * Handle a new issue.
 *
 * @param $payload
 *  GitHub payload.
 * @param integer $uid
 *  The employee ID.
 *
 * @see https://developer.github.com/v3/activity/events/types/#issuesevent
 */
function productivity_gituhub_payload_handle_issues_opened($payload, $uid) {
  // Simplify code.
  $data = $payload->issue;
  $title = htmlspecialchars($data->title, ENT_NOQUOTES, 'UTF-8');

  $node = new stdClass();
  $node->title = $title;
  $node->type = 'github_issue';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->status = NODE_PUBLISHED;
  $node->uid = $uid;

  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->body->value->set($data->body);
  $gh_project_id = $payload->repository->full_name;
  $project_nid = productivity_github_get_project_by_repository($payload->repository);

  $fields = array(
    'field_employee' => $node->uid,
    'field_project' => $project_nid,
    'field_issue_id' => (int)$data->number,
    'field_push_date' => array(strtotime($data->updated_at)),
    'field_github_project_id' => $gh_project_id,
    'field_github_content_type' => 'issue',
  );

  productivity_github_save_references_issue($wrapper, $data->body, $gh_project_id, $project_nid);

  // Get time estimate from title, if it has any.
  $matches = array();
  if (preg_match('/\[([0-9]+)[h|H]\]|\[([0-9]+\.[0-9]+)[h|H]\]/', $title, $matches)) {
    // The iss has a time estimate.
    $time_estimate = empty($matches[1]) ? (empty($matches[2]) ? 0 : $matches[2]) : $matches[1];

    $fields += array(
      'field_time_estimate' => $time_estimate,
    );
  }

  foreach ($fields as $field_name => $field_value) {
    $wrapper->{$field_name}->set($field_value);
  }

  $wrapper->save();
}

/**
 * Get GitHub entity ID from GitHub's API info.
 *
 * @param $payload
 *  The push info from GitHub API.
 * @param integer $uid
 *  The employee ID.
 *
 * @return mixed
 *  The GitHub entity ID.
 */
function productivity_github_get_entity_id_by_push_info($payload, $uid) {
  $issue_id = (int)$payload->pull_request->number;

  // Check if there's any entity opened already for this pull request (issue)
  // which is referencing the current pusher.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'github_issue')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_issue_id', 'value', $issue_id)
    ->fieldCondition('field_employee', 'target_id', $uid)
    // We check project id with repo name, since it's more reliable than Project
    // nid, because a project can have multiple repos.
    ->fieldCondition('field_github_project_id', 'value', $payload->repository->full_name)
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
    ->range(0, 1)
    ->execute();

  if (!empty($result['node'])) {
    return key($result['node']);
  }

  return FALSE;
}

/**
 * Get the issue number from the pull request body.
 *
 * @param $text string
 *  Pull request's body.
 *
 * @return number
 *  Issue number in Github.
 */
function _productivity_github_issue_number_from_body($text) {
  $matches = array();
  if (preg_match_all("/[^&]#([0-9]+)/", $text, $matches)) {

    // Found an issue.
    return $matches;
  }

  return FALSE;
}

/**
 * Get the current number of hours an issue has been worked on.
 *
 * @param $node_id int
 *   Github issue node ID.
 *
 * @return int
 *   Total number of hours already worked on a certain issue.
 */
function productivity_github_sum_issue_hours($node_id) {
  $sum = 0;

  // Get list of pull request IDs related to the issue.
  $query = db_select('node', 'n');
  $query->rightJoin('field_data_field_github_content_type', 'ct', 'ct.entity_id = n.nid');
  $query->rightJoin('field_data_field_issue_reference', 'ir', 'ir.entity_id = n.nid');

  $result = $query
    ->fields('n', array('title', 'nid'))
    ->fields('ir', array('field_issue_reference_target_id'))
    ->condition('type', 'github_issue')
    ->condition('status', NODE_PUBLISHED)
    ->condition('ct.field_github_content_type_value', 'pull_request')
    ->condition('ir.field_issue_reference_target_id', $node_id)
    ->execute()
    ->fetchAllAssoc('nid');

  // The Github issue could have no pull requests attached to it.

  // We want to catch any time tracking that points at the issue itself.
  $searched_node_ids = array_keys($result) + array('issue_nid' => $node_id);

  // Get all tracking data for all the pull requests.
  $query = db_select('field_data_field_issues_logs', 'il');
  $result = $query
    ->fields('il', array('field_issues_logs_field_time_spent_value'))
    ->condition('entity_type', 'node')
    ->condition('bundle', 'time_tracking')
    ->condition('field_issues_logs_field_github_issue_target_id', $searched_node_ids, 'IN')
    ->execute()
    ->fetchAll();

  if (empty($result)) {
    // No tracking data to process.
    return $sum;
  }

  foreach($result as $row) {
    // Sum up the rows.
    $sum += $row->field_issues_logs_field_time_spent_value;
  }

  return $sum;
}

/**
 * Performs an HTTP request to GitHub and check for errors.
 *
 * @param string $url
 *   A string containing the resource path, without the full api base URL to
 *   allow easier mocking of GitHub services.
 * @param array $options
 *   Options array as passed to drupal_http_request().
 * @param bool $decode
 *   Determines if response should be decoded. Defaults to TRUE.
 *
 * @return object
 *   The result object.
 *
 * @see drupal_http_request().
 */
function productivity_github_http_request($url, array $options, $decode = TRUE) {
  $prefix = variable_get('productivity_github_api_base_url', 'https://api.github.com/');
  if ($decode) {
    // Get results wrapped in a JSON function, both data and headers.
    // @see https://developer.github.com/v3/#json-p-callbacks
    $url .= strpos($url, '?') === FALSE ? '?callback=result' : '&callback=result';
  }

  $result = drupal_http_request($prefix . $url, $options);
  productivity_github_check_response_http_error($url, $result);

  if (!$decode) {
    return $result;
  }
  else {
    // Get the data from JSON.

    $data = str_replace('/**/result(', '', $result->data);
    $data = rtrim($data, ")");

    $result = drupal_json_decode($data);

    $meta = $result['meta'];
    $data = $result['data'];

    return array('data' => $data, 'meta' => $meta);
  }
}


/**
 * Check if an error was returned by Github, and if so throw an exception.
 *
 * GitHub might return a 200 code, but the data is in fact an error.
 *
 * @param string $url
 *   The URL sent to GitHub
 * @param $result
 *   The result object from the drupal_http_request() call.
 *
 * @throws \RestfulServerConfigurationException
 */
function productivity_github_check_response_http_error($url, $result) {
  if (intval($result->code) !== 200 || strpos($result->data, 'error=') === 0) {

    $params = array(
      '@url' => $url,
      '@code' => $result->code,
      '@error' => $result->data,
    );

    $message = format_string('Calling @url resulted with a @code HTTP code, with the following error message: @error', $params);

    $exception_class = strpos($result->data, 'error=bad_verification_code') === 0 ? 'RestfulBadRequestException' : 'RestfulServerConfigurationException';
    throw new $exception_class($message);
  }
}

/**
 * Get the valid result from the response of the HTTP request.
 *
 * Result format is for example:
 * 'access_token=someTokenValue&scope=&token_type=bearer';
 *
 * @param $result
 *   The result object from the drupal_http_request() call.
 *
 * @return string
 *   The result.
 */
function productivity_github_get_data_from_http_result($result) {
  $return = $result->data;

  $return = explode('&', $result->data);
  $return = explode('=', $return[0]);
  return $return[1];
}

/**
 * Query DB for every GitHub issue linked to the project id from the URL,
 * that in the URL month and year.
 *
 * @param $project_id
 *  The project id number.
 * @param $year
 *  The year to filter the issues.
 * @param $month
 *  The month to filter the issues.
 *
 * @return $node
 *  All the nodes return from the query.
 */
function productivity_github_get_project_github_issues_query($project_id, $year, $month) {

  if ($month == 'all') {
    $project_start_month = format_string("@year-01-01", array('@year' => $year));
    $project_end_month = format_string("@year-12-31", array('@year' => $year));
  }
  else {
    $project_start_month = format_string("@year-@month-01", array(
      '@year' => $year,
      '@month' => $month
    ));
    $project_end_month = format_string("@year-@month-01", array(
      '@year' => ($month == 12) ? $year+1 : $year,
      '@month' => ($month == 12) ? 1 : ($month + 1),
    ));
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'time_tracking')
    ->fieldCondition('field_project', 'target_id', $project_id);

  // Return all time.
  if ($year != 'all') {
    $query
      ->fieldCondition('field_work_date', 'value', $project_start_month, '>=')
      ->fieldCondition('field_work_date', 'value', $project_end_month, '<');
  }

  $result = $query->execute();

  if(empty($result['node'])) {
    return;
  }

  // TODO: This can timeout on projects with a lot of issues.
  return node_load_multiple(array_keys($result['node']));
}