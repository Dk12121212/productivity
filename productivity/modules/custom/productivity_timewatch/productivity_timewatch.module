<?php
/**
 * @file
 * Code for the Productivity session feature.
 */

include_once 'productivity_timewatch.features.inc';


function productivity_timewatch_menu() {
  $items['monthly-employee-report'] = array(
    'title' => 'Monthly employee report',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_timewatch_monthly_employee_report_callback',
    'type' => MENU_CALLBACK,
    'file' => 'monthly_employee_report/monthly_employee_report.inc'
  );

  $items['monthly-employee-report/%user/%/%'] = array(
    'title' => 'Monthly employee report',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_timewatch_monthly_employee_report_callback',
    'page arguments' => array(1, 2, 3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'monthly_employee_report/monthly_employee_report.inc'
  );

  $items['monthly-employee-report/pdf/%user/%/%'] = array(
    'title' => 'Monthly employee report - multiple',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_timewatch_monthly_employee_report_pdf_callback',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'monthly_employee_report/monthly_employee_report.inc'
  );
  
  return $items;
}

/**
 * Implements hook_theme().
 */
function productivity_timewatch_theme() {
  return array(
    'productivity_timewatch_monthly_employee_report' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'productivity_timewatch') . '/monthly_employee_report',
      'template' => 'monthly-employee-report',
    ),
    'productivity_timewatch_monthly_employee_report_table' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'productivity_timewatch') . '/monthly_employee_report',
      'template' => 'monthly-employee-report-table',
    ),
  );
}



/**
 * Implements hook_ctools_plugin_directory().
 */
function productivity_timewatch_ctools_plugin_directory($module, $plugin) {
  if (($module == 'restful') || ($module == 'ctools')){
    return 'plugins/' . $plugin;
  }
}


/**
 * Implements hook_node_insert().
 */
function productivity_timewatch_node_insert($node) {
  if ($node->type != 'work_session') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $alert_days = [
    'Vacation',
    'Miluim', 'session_types',
    'Sick', 'session_types',
    'Convention',
  ];
  if (in_array($wrapper->field_session_type->label(), $alert_days)) {
    $params = [
      'name' => $wrapper->field_employee->name->value(),
      'uid' => $wrapper->field_employee->getIdentifier(),
      'seesion_type' => $wrapper->field_session_type->label(),
      'date' => $wrapper->field_session_date->value->value(),
    ];
    drupal_mail('productivity_timewatch', 'alert_work_seesion', 'info@gizra.com', language_default(), $params, 'productivity@gizra.com');

  }
}

/**
 * Implements hook_mail().
 */
function productivity_timewatch_mail($key, &$message, $params) {
  switch ($key) {
    case 'alert_work_seesion':
      // Set headers etc
      $message['to'] = 'info@gizra.com';
      $message['subject'] = t('@name added a @type day on the @date', [
        '@name' => $params['name'],
        '@type' => $params['seesion_type'],
        '@date' => format_date($params['date']),
      ]);
      $message['body'][] = t('See details @here,', [
        '@here' => l('here', 'user', [
          'query' => [
            'uid' => $params['uid'],
            ],
          'absolute' => TRUE,
        ]),
      ]);
      break;
  }
}

/**
 * Find a user by pincode.
 *
 * @param string $pincode
 *  A pincode
 *
 * @return int|NULL
 *  User ID.
 */
function productivity_timewatch_get_uid_by_pincode($pincode) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->fieldCondition('field_pincode', 'value', $pincode)
    ->range(0, 1)
    ->execute();

  return !empty($result['user']) ? key($result['user']) : NULL;
}

/**
 * Implements hook_user_presave().
 */
function productivity_timewatch_user_presave(&$edit, $account, $category) {
  if (empty($edit['field_pincode'][LANGUAGE_NONE][0]['value'])) {
    // Ignore users without pincode.
    return;
  }

  $pincode = $edit['field_pincode'][LANGUAGE_NONE][0]['value'];

  // Check if this pincode is already used by another user.
  $uid = productivity_timewatch_get_uid_by_pincode($pincode);
  if ($uid && $uid != $account->uid) {
    throw new \Exception('Please choose a different pincode, user id  ' . $uid . ' is already using it.');
  }
}

/**
 * Implements hook_node_presave().
 *
 * Deleting drupal's default end date (When saving the session through drupal's
 * form, it sets the end date to be the same as the start date by default).
 */
function productivity_timewatch_node_presave($node) {
  if ($node->type != 'work_session') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $date = $wrapper->field_session_date->value();
  // Delete the end date in case it's identical to the start date.
  if (!empty($date['value2']) && $date['value'] == $date['value2']) {
    $wrapper->field_session_date->value2->set(NULL);
  }

  // Set title.
  if (!$wrapper->field_employee->value()) {
    $title = $wrapper->field_special_day_name->value();
  }
  else {
    $title = $wrapper->field_employee->label();
  }

  $day = date('d/m/y', $date['value']);
  $type = $wrapper->field_session_type->label();
  $node->title = format_string('@date - @$title - @type', array('@date' => $day, '@$title' => $title, '@type' => $type));
}

/**
 * Implements hook_permission().
 */
function productivity_timewatch_permission() {
  return array(
    'timewatch punch' => array(
      'title' => t('Timewatch punch'),
      'description' => t('Start or end a work session.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove inactive employees and irrelevant projects from the timewatch form.
 */
function productivity_timewatch_form_work_session_node_form_alter(&$form, &$form_state) {
  // Hide the title.
  $form['title']['#access'] = FALSE;

  $wrapper = entity_metadata_wrapper('node', $form['#node']);
  $uids = productivity_account_get_employee_uids();

  // Make sure the selected employee is in the list, even if they're not active.
  if ($wrapper->field_employee->value()) {
    $uid = $wrapper->field_employee->getIdentifier();
    if (!in_array($uid, $uids)) {
      array_unshift($uids, $uid);
    }
  }
  // Build the options list.
  $options = array('_none' => '- ' . t('Select employee') . ' -');
  foreach(user_load_multiple($uids) as $account) {
    $options[$account->uid] = $account->name;
  }
  $form['field_employee'][LANGUAGE_NONE]['#options'] = $options;


  // Display only projects that are marked as "Referencable by work sessions".
  $nids = array();
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_allow_session_reference', 'value', TRUE)
    ->propertyOrderBy('title')
    ->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
  }

  // Make sure the selected project is in the list, even if it's non-
  // referencable.
  if ($wrapper->field_project->value()) {
    $nid = $wrapper->field_project->getIdentifier();
    if (!in_array($nid, $nids)) {
      array_unshift($nids, $nid);
    }
  }
  $options = array('_none' => '- ' . t('None') . ' -');
  foreach(node_load_multiple($nids) as $node) {
    $options[$node->nid] = $node->title;
  }
  $form['field_project'][LANGUAGE_NONE]['#options'] = $options;

  // Select the default session type.
  if (empty($form['field_session_type'][LANGUAGE_NONE]['#default_value'])) {
    $form['field_session_type'][LANGUAGE_NONE]['#default_value'] = variable_get('productivity_timewatch_default_session_type_tid');
  }
}

/**
 * Query DB for every user sessions, within month and year.
 *
 * @param uid
 *  The project id number.
 * @param $year
 *  The year to filter the issues.
 * @param $month
 *  The month to filter the issues.
 *
 * @return $node_keys
 *  All the nodes return from the query.
 */
function productivity_timewatch_get_user_sessions($uid, $year, $month, $non_regular_only = FALSE, $day = FALSE) {

  if ($month == 'all') {
    $project_start_month = format_string("01-01-@year", array('@year' => $year));
    $project_end_month = format_string("01-01-@year", array('@year' => ($year + 1)));
  }
  elseif(!$day) {
    $project_start_month = format_string("01-@month-@year", array(
      '@year' => $year,
      '@month' => $month
    ));
    $project_end_month = format_string("01-@month-@year", array(
      '@year' => ($month == 12) ? $year+1 : $year,
      '@month' => ($month == 12) ? 1 : ($month + 1),
    ));
  }
  // Specific day
  else  {
    $project_start_month = format_string("@day-@month-@year", array(
      '@year' => $year,
      '@month' => $month,
      '@day' => $day,
    ));
    $project_end_month = date('d-m-Y',strtotime($project_start_month . "+1 days"));
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'work_session')
    ->fieldCondition('field_employee', 'target_id', $uid);

  if ($non_regular_only) {
    $tids = taxonomy_get_term_by_name('Regular', 'session_types');
    $query
      ->fieldCondition('field_session_type', 'tid',  array_keys($tids), 'NOT IN');
  }

  // Return all time.
  if ($year != 'all') {
    $query
      ->fieldCondition('field_session_date', 'value', strtotime($project_start_month), '>=')
      ->fieldCondition('field_session_date', 'value', strtotime($project_end_month), '<');
  }

  $result = $query->execute();

  if(empty($result['node'])) {
      return [];
  }

  // TODO: This can timeout on users with a lot of sessions.
  return array_keys($result['node']);
}


/**
 * Query DB for every user sessions, within month and year.
 *
 * @param uid
 *  The project id number.
 * @param $year
 *  The year to filter the issues.
 * @param $month
 *  The month to filter the issues.
 *
 * @return $node_keys
 *  All the nodes return from the query.
 */
function productivity_timewatch_get_fundays($year, $month) {

  if ($month == 'all') {
    $project_start_month = format_string("01-01-@year", array('@year' => $year));
    $project_end_month = format_string("31-12-@year", array('@year' => $year));
  }
  else {
    $project_start_month = format_string("01-@month-@year", array(
      '@year' => $year,
      '@month' => $month
    ));
    $project_end_month = format_string("01-@month-@year", array(
      '@year' => ($month == 12) ? $year+1 : $year,
      '@month' => ($month == 12) ? 1 : ($month + 1),
    ));
  }

  // Get TID of global days.
  $tids = taxonomy_get_term_by_name('Funday', 'session_types');
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'work_session')
    ->fieldCondition('field_session_type', 'tid', array_keys($tids), 'IN');

  // Return all time.
  if ($year != 'all') {
    $query
      ->fieldCondition('field_session_date', 'value', strtotime($project_start_month), '>=')
      ->fieldCondition('field_session_date', 'value', strtotime($project_end_month), '<');
  }

  $result = $query->execute();

  if(empty($result['node'])) {
    return;
  }

  $nodes =  node_load_multiple((array_keys($result['node'])));
  $bydate_result = array();
  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $day =  date('d', $node->field_session_date['und'][0]['value']);
    $day_key = str_pad($day, 2, '0', STR_PAD_LEFT);
    $bydate_result[$day_key]['type'] = 'global';
    $bydate_result[$day_key]['class'] = 'funday';
    $bydate_result[$day_key]['title'] = $wrapper->field_special_day_name->value() ? $wrapper->field_special_day_name->value() : $wrapper->field_session_type->label();
    $bydate_result[$day_key]['start'] = $node->field_session_date['und'][0]['value'];
    $bydate_result[$day_key]['end'] = $node->field_session_date['und'][0]['value2'];
    $bydate_result[$day_key]['nid'] = $node->nid;
    $bydate_result[$day_key]['length'] = 'F';
    $bydate_result[$day_key]['tracking'] = FALSE;
  }
  return $bydate_result;
}

/**
 * Create a nice reusable array with daily sessions.
 */
function productivity_timewatch_get_employee_sessions($account, $month, $year, $day = FALSE) {
  $node_keys = productivity_timewatch_get_user_sessions($account->uid, $year, $month, FALSE, $day);

  // No working day return early.
  if (!$node_keys) {
    return FALSE;
  }

  $summary =  array();
  // Get the skeleton of the full month.
  $summary['6.potential'] = array(
    'name' => t('Potential'),
    'total_minutes' => 0,
    'actual' => '100%',
  );

  // Default to last day of the month
  if (!$day) {
    // Set start day.
    $day = 1;
    $endday = date('t', strtotime('1.' . $month . '.' . $year));

    // Case employee has stoped working, and we are on the month he stoped.
    if (isset($account->field_date['und']) && $account->field_date['und'][0]['value'] != $account->field_date['und'][0]['value2']
      && "$month-$year" == date('n-Y', strtotime($account->field_date['und'][0]['value2']))
    ) {
      $endday = date('j', strtotime($account->field_date['und'][0]['value2']));
      $summary['6.potential']['name'] = t('Potential (For partial month)');
    }
    // Case we are in the middle of current month, or if employee is leaving in
    // the current month but todays date id before that.
    if ("$month-$year" == date('n-Y') && (!$endday || $endday > date('j'))) {
      $endday = date('j');
      $summary['6.potential']['name'] = t('Potential (until today)');
    }
  }
  else {
    $endday = $day;
  }

  $month_array = productivity_timewatch_build_month_skeleton($month, $year, $summary['6.potential']['total_minutes'], $endday, $day);
  // Get all sessions for the project.
  $madaan = array();
  $results = productivity_timewatch_create_sessions_array($node_keys, $summary, $madaan, $month_array, $endday);

  return [
    'days' => $results['days'],
    'days_sum' => $results['days_sum'],
    'summary' => $summary,
    'madaan' => $madaan,
  ];
}

function productivity_timewatch_get_work_day_length($month, $year) {
  if (($year == 2018 && $month >= 4) || ($year > 2018)) {
    return 8.9;
  }
  return 9;
}

/**
 * Build monthly array skeleton
 *
 * @param $endday - the last day of the skeleton, if an employee left before the
 *   end of the month of if we are in is the middle of the current month.
 *
 */
function productivity_timewatch_build_month_skeleton($month, $year, &$potentials, $last_day_this_month, $start_day = 1) {
  // Get Holidays.
  $globals = productivity_holiday_per_month($month, $year);
  $fundays = productivity_timewatch_get_fundays($year, $month);
  // Combine holidays and fundays.
  if ($globals && $fundays) {
    $globals += $fundays;
  }
  elseif (!$globals) {
    $globals = $fundays;
  }

  $array = array();

  // Loop into the days of the month.
  for ($day = $start_day; $day <= $last_day_this_month; $day++) {
    // Add leading zeros.
    $day_key = str_pad($day, 2, '0', STR_PAD_LEFT);
    $key = $day_key. '_0';
    $date_string = format_string("@month/@day/@year", array(
      '@day' => $day,
      '@month' => $month,
      '@year' => $year,
    ));
    $date = strtotime($date_string);
    $week_day =  date('l', $date);
    // Special day, holiday or funday.
    $special_day_name = isset($globals[$day_key]) ? $globals[$day_key]['title'] : FALSE;

    $array[$key]  = array(
      '01.Date' => date('d/m/y', $date),
      '02.Week day' => $week_day,
      '03.entry' => FALSE,
      '04.exit' => '',
      '05.total' => '',
      '06.project' => t('Day Off'),
      '07.source' => '',
      '08.retro' => 'no',
      '09.all day total' => '',
    );
    // Count potentials hours, no WE and no Holiday days.
    if (!in_array($week_day, array('Friday', 'Saturday')) && !$special_day_name) {
      $work_day_length = productivity_timewatch_get_work_day_length($month, $year);
      $potentials += $work_day_length * 60;
    }
    // Label weekends.
    if(in_array($week_day, array('Friday', 'Saturday'))) {
      $array[$key]['06.project'] = t('Weekend');
    }
    // Holidays.
    if ($special_day_name) {
      $special_day_length = ($globals[$day_key]['end'] - $globals[$day_key]['start']);
      $day_length = productivity_timewatch_get_work_day_length($month, $year);
      $special_day_length_diff =  ($day_length * 60 * 60) - $special_day_length;
      // Deal with half day holidays.
      if ($special_day_length_diff > 0) {
        $potentials += ($special_day_length_diff / 60);
      }
      $array[$key]['06.project'] = t('@type - !link (@day_length Hours)', array(
        '@type' => $globals[$day_key]['type'],
        '!link' => l($special_day_name, 'node/' . $globals[$day_key]['nid']),
        '@day_length' => productivity_timewatch_format_total($special_day_length / 60),
      ));
      // Remove the FALSE, to print the day.
      $array[$key]['03.entry'] = '-';
    }
  }
  return $array;
}

/**
 * Create a matrix of all the sessions nodes,
 * And the url project.
 *
 * @param $nodes
 *  All the nodes return from the query.
 *
 * @param $endday - the last day of the skeleton, if an employee left before the
 *   end of the month of if we are in is the middle of the current month.
 *
 * @return array
 *  Matrix of all the sessions, and the URL project
 */
function productivity_timewatch_create_sessions_array($node_keys, &$summary, &$madaan, $month_array, $endday) {
  $summary['4.total'] = array(
    'name' => t('Total'),
    'total_minutes' => 0,
    'actual' => '100%',
  );
  $daily_sum = array();
  $daily_sum_nomalized = array();
  foreach ($node_keys as $nid) {
    $wrapper = entity_metadata_wrapper('node', $nid);
    $node_account = $wrapper->author->value();
    $start_time = $wrapper->field_session_date->value->value();
    $end_time = $wrapper->field_session_date->value2->value();
    // No end time.
    if (!$end_time) {
      $end_time = $start_time;
    }

    $total_time = $end_time - $start_time;
    $total_minutes = ceil($total_time / 60);

    // Day type (Global/Miluim/Regular) or project name (Madaan).
    $retro = FALSE;
    $day_name = $wrapper->field_session_type->label();
    // Fallback for non defined days.
    if ($day_name == NULL) {
      $day_name = 'Regular';
    }

    $madaan_project = FALSE;

    // Madaan day.
    if ($wrapper->field_project->value() != NULL) {
      $madaan_project = $wrapper->field_project->label();
      $pid = $wrapper->field_project->getIdentifier();

      // Retro.
      $one_day = 24 * 60 * 60;
      if ($wrapper->changed->value() > $end_time + $one_day && !variable_get('productivity_bypass_retro', TRUE)) {
        $retro = TRUE;
      }
    }

    // Get the proper key to support multiple entrance per day, first occurrence 01_1, second 01_2 ...
    $key = 0;
    $day = date('d', $start_time);

    // Stop at $endday limit.
    if ($endday >= $day) {

      // Create multiple day instances.
      while (TRUE) {
        $day_key = $day . '_' . $key;
        if (isset($month_array[$day_key]) && !$month_array[$day_key]['03.entry']) {
          break;
        }
        if (!isset($month_array[$day_key])) {
          $month_array[$day_key] = array();
          break;
        }
        $key++;
      }

      $month_array[$day_key] = array(
          '03.entry' => l(date('H:i', $start_time), 'node/' . $nid),
          '04.exit' => date('H:i', $end_time),
          '05.total' => productivity_timewatch_format_total($total_minutes),
          '06.project' => $madaan_project ? $madaan_project : $day_name,
          // The source of the data, using time watch or from home (manual).
          '07.source' => $node_account->name,
          '08.retro' => $retro ? t('yes') : t('no'),
          '09.all day total' => productivity_timewatch_format_total($total_minutes),
        ) + $month_array[$day_key];

      $daily_sum[$day_key] = $total_minutes;
      $daily_sum_nomalized[$day] = $total_minutes;
      // Multiple entrance in same day, summarize total day on last day.
      if ($key > 0) {
        // If more than one entrance in a day, display total only in last line.
        $previous_day_key = $day . '_' . ($key - 1);
        $month_array[$day_key]['01.Date'] = $month_array[$previous_day_key]['01.Date'];
        // If previous day was half day holiday.
        if ($month_array[$previous_day_key]['03.entry'] != '-') {
          $month_array[$day_key]['02.Week day'] = t('Re-entry');
        }
        else {
          $month_array[$day_key]['02.Week day'] = $month_array[$previous_day_key]['02.Week day'];
        }
        // Case holiday or global day.
        if (!isset($daily_sum[$previous_day_key])) {
          $daily_sum[$previous_day_key] = 0;
        }

        // Summarize full day with all re-entry.
        $month_array[$day_key]['09.all day total'] = productivity_timewatch_format_total($total_minutes + $daily_sum[$previous_day_key]);
        $month_array[$previous_day_key]['09.all day total'] = '';
        $daily_sum[$day_key] =  $daily_sum[$previous_day_key] + $total_minutes;
        $daily_sum_nomalized[$day] =  $daily_sum[$previous_day_key] + $total_minutes;
      }
      // Sort by key.
      ksort($month_array[$day_key]);

      // Create stub for summary.
      $day_key_summary = "1.$day_name";

      if (!isset($summary[$day_key_summary])) {
        $summary[$day_key_summary] = array(
          'name' => $day_name,
          'total_minutes' => 0,
          'actual' => 0,
        );
      }
      $summary[$day_key_summary]['total_minutes'] += $total_minutes;

      // Madaan project summary.
      if ($madaan_project) {
        if (!isset($madaan[$pid])) {
          $madaan[$pid]['1.Attendance'] = array(
            'name' => t('Attendance (inc. Conv) @project MOP Madaan', array('@project' => $madaan_project)),
            'total_minutes' => 0,
            'actual' => 0,
          );
        }
        // Add current total.
        if ($retro) {
          if (!isset($madaan[$pid]['2.retro'])) {
            $madaan[$pid]['2.retro'] = array(
              'name' => $day_name . t(' MOP Madaan - Retro updates'),
              'total_minutes' => 0,
              'actual' => 0,
            );
          }
          $madaan[$pid]['2.retro']['total_minutes'] += $total_minutes;
        }
        else {
          if ($day_name == 'Regular') {
            $madaan[$pid]['1.Attendance']['total_minutes'] += $total_minutes;
          }
        }
      }

      $summary['4.total']['total_minutes'] += $total_minutes;
    }
  }
  // Convert sums to hours.
  foreach ($daily_sum_nomalized as &$day_sum) {
    $day_sum = productivity_timewatch_format_total($day_sum);
  }
  // Sort by day.
  ksort($month_array);
  return [
    'days' => $month_array,
    'days_sum' => $daily_sum_nomalized,
    ];
}

/**
 * Format hours and minutes to -> hh:mm (dec value in Hours).
 *
 * @param $dec
 *  Use decimal format for minutes.
 */
function productivity_timewatch_format_total($minutes, $dec = FALSE, $decimals = 2) {
  $hours = floor($minutes / 60);
  $minutes = floor($minutes % 60);
  if (!$dec) {
    $return = $hours . ':' . str_pad($minutes, 2, '0', STR_PAD_LEFT);
  }
  else {
    $return = number_format($hours + ($minutes / 60), $decimals);
  }
  return $return;
}

/**
 * Create summary table displayed in footer.
 */
function productivity_timewatch_create_summary_table($summaries) {
  // Headers.
  $header = array(
    t('Project/ Type'),
    t('Total'),
    t('%'),
  );


  $time_off = $summaries['6.potential']['total_minutes'] - $summaries['4.total']['total_minutes'];

  // Extra time.

  if ($time_off < 0) {
    $summaries['2.ExtraTime'] = array(
      'name' => t('Extra time (Included in Total)'),
      'total_minutes' => $time_off * -1,
      'actual' => '100%',
    );
    if (isset($summaries['1.Regular'])) {
      $summaries['1.Regular']['total_minutes'] += $time_off;
    }
  }
  else {
    // Undeclared days, this are hours not marked as anything.
    $summaries['5.time off'] = array(
      'name' => t('Time off - (Missing without cause)'),
      'total_minutes' => $time_off,
      'actual' => '100%',
    );
  }

  $total = $summaries['6.potential']['total_minutes'];
  // Calc actual %
  foreach($summaries as &$summary) {
    $summary['actual'] = number_format(100 / $total * $summary['total_minutes'], 2) . '%';
    $summary['total_minutes'] = productivity_timewatch_format_total($summary['total_minutes'], TRUE);
  }

  $summaries['1.Regular']['name'] = t('Attendance');


  ksort($summaries);
  return theme('table', array(
    'header' => $header,
    'rows' => $summaries,
  ));
}

/**
 * @param $account
 *   The account to punch for.
 * @param $project_madaan_nid
 *   Pass a maddan project.
 */
function productivity_timewatch_punch($account, $project_madaan_nid) {
  // Find an existing session with no end date, if regular.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'work_session')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_employee', 'target_id', $account->uid)
    ->fieldCondition('field_session_date', 'value2', NULL)
    ->range(0, 1)
    ->execute();

  // If no session
  if (empty($result['node'])) {
    // When there's no open session, create a new one.
    $values = array(
      'type' => 'work_session',
      'uid' => $account->uid,
      'status' => NODE_PUBLISHED,
    );
    $node = entity_create('node', $values);
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_employee->set($account->uid);
    $wrapper->field_session_date->value->set(REQUEST_TIME);

    $term = taxonomy_get_term_by_name('regular', 'session_types');
    if (!empty($term)) {
      $term = array_pop($term);
      $wrapper->field_session_type->set($term->tid);
    }

  }
  else {
    // Otherwise set the end date of the open session.
    $wrapper = entity_metadata_wrapper('node', key($result['node']));
    $wrapper->field_session_date->value2->set(REQUEST_TIME);
  }

  if ($project_madaan_nid) {
    $wrapper->field_project->set($project_madaan_nid);
  }

  return $wrapper->save();
}

/**
 * @param $account
 *   The account to punch for.
 * @param $project_madaan_nid
 *   Pass a maddan project.
 */
function productivity_timewatch_punch_non_regular($account, $day_type, $timestamp, $half, $month, $year) {
  // When there's no open session, create a new one.
  $values = array(
    'type' => 'work_session',
    'uid' => $account->uid,
    'status' => NODE_PUBLISHED,
  );

  $day_length = productivity_timewatch_get_work_day_length($month, $year);

  $node = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->field_employee->set($account->uid);
  // Set to 9:00am
  $wrapper->field_session_date->value->set($timestamp + $day_length * 3600);
  // Set to end 9:00 + dayl length.
  $end_time = $half ? 9 + ($day_length / 2) : 9 + $day_length;
  $wrapper->field_session_date->value2->set($timestamp + $end_time * 3600);
  $term = taxonomy_get_term_by_name($day_type, 'session_types');

  if (!empty($term)) {
    $term = array_pop($term);
    $wrapper->field_session_type->set($term->tid);
  }
  return $wrapper->save();
}
