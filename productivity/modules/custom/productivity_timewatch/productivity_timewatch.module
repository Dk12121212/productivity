<?php
/**
 * @file
 * Code for the Productivity session feature.
 */

include_once 'productivity_timewatch.features.inc';


function productivity_timewatch_menu() {
  $items['monthly-employee-report'] = array(
    'title' => 'Monthly employee report',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_timewatch_monthly_employee_report_callback',
    'type' => MENU_CALLBACK,
    'file' => 'monthly_employee_report/monthly_employee_report.inc'
  );

  $items['monthly-employee-report/%user/%/%'] = array(
    'title' => 'Monthly employee report',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_timewatch_monthly_employee_report_callback',
    'page arguments' => array(1, 2, 3),
    'type' => MENU_CALLBACK,
    'file' => 'monthly_employee_report/monthly_employee_report.inc'
  );

  $items['monthly-employee-report/pdf/%user/%/%'] = array(
    'title' => 'Monthly employee report - multiple',
    'access arguments' => array('access content'),
    'page callback' => 'productivity_timewatch_monthly_employee_report_pdf_callback',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'monthly_employee_report/monthly_employee_report.inc'
  );
  
  return $items;
}

/**
 * Implements hook_theme().
 */
function productivity_timewatch_theme() {
  return array(
    'productivity_timewatch_monthly_employee_report' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'productivity_timewatch') . '/monthly_employee_report',
      'template' => 'monthly-employee-report',
    ),
    'productivity_timewatch_monthly_employee_report_table' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'productivity_timewatch') . '/monthly_employee_report',
      'template' => 'monthly-employee-report-table',
    ),
  );
}



/**
 * Implements hook_ctools_plugin_directory().
 */
function productivity_timewatch_ctools_plugin_directory($module, $plugin) {
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Find a user by pincode.
 *
 * @param string $pincode
 *  A pincode
 *
 * @return int|NULL
 *  User ID.
 */
function productivity_timewatch_get_uid_by_pincode($pincode) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->fieldCondition('field_pincode', 'value', $pincode)
    ->range(0, 1)
    ->execute();

  return !empty($result['user']) ? key($result['user']) : NULL;
}

/**
 * Implements hook_user_presave().
 */
function productivity_timewatch_user_presave(&$edit, $account, $category) {
  if (empty($edit['field_pincode'][LANGUAGE_NONE][0]['value'])) {
    // Ignore users without pincode.
    return;
  }

  $pincode = $edit['field_pincode'][LANGUAGE_NONE][0]['value'];

  // Check if this pincode is already used by another user.
  $uid = productivity_timewatch_get_uid_by_pincode($pincode);
  if ($uid && $uid != $account->uid) {
    throw new \Exception('Please choose a different pincode, user id  ' . $uid . ' is already using it.');
  }
}

/**
 * Implements hook_node_presave().
 *
 * Deleting drupal's default end date (When saving the session through drupal's
 * form, it sets the end date to be the same as the start date by default).
 */
function productivity_timewatch_node_presave($node) {
  if ($node->type != 'work_session') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $date = $wrapper->field_session_date->value();
  // Delete the end date in case it's identical to the start date.
  if (!empty($date['value2']) && $date['value'] == $date['value2']) {
    $wrapper->field_session_date->value2->set(NULL);
  }

  // Set title.
  if (!$wrapper->field_employee->value()) {
    $title = $wrapper->field_special_day_name->value();
  }
  else {
    $title = $wrapper->field_employee->label();
  }

  $day = date('d/m/y', $date['value']);
  $type = $wrapper->field_session_type->label();
  $node->title = format_string('@date - @$title - @type', array('@date' => $day, '@$title' => $title, '@type' => $type));
}

/**
 * Implements hook_permission().
 */
function productivity_timewatch_permission() {
  return array(
    'timewatch punch' => array(
      'title' => t('Timewatch punch'),
      'description' => t('Start or end a work session.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove inactive employees and irrelevant projects from the timewatch form.
 */
function productivity_timewatch_form_work_session_node_form_alter(&$form, &$form_state) {
  // Hide the title.
  $form['title']['#access'] = FALSE;

  $wrapper = entity_metadata_wrapper('node', $form['#node']);
  $uids = productivity_account_get_employee_uids();

  // Make sure the selected employee is in the list, even if they're not active.
  if ($wrapper->field_employee->value()) {
    $uid = $wrapper->field_employee->getIdentifier();
    if (!in_array($uid, $uids)) {
      array_unshift($uids, $uid);
    }
  }
  // Build the options list.
  $options = array('_none' => '- ' . t('Select employee') . ' -');
  foreach(user_load_multiple($uids) as $account) {
    $options[$account->uid] = $account->name;
  }
  $form['field_employee'][LANGUAGE_NONE]['#options'] = $options;


  // Display only projects that are marked as "Referencable by work sessions".
  $nids = array();
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_allow_session_reference', 'value', TRUE)
    ->propertyOrderBy('title')
    ->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
  }

  // Make sure the selected project is in the list, even if it's non-
  // referencable.
  if ($wrapper->field_project->value()) {
    $nid = $wrapper->field_project->getIdentifier();
    if (!in_array($nid, $nids)) {
      array_unshift($nids, $nid);
    }
  }
  $options = array('_none' => '- ' . t('None') . ' -');
  foreach(node_load_multiple($nids) as $node) {
    $options[$node->nid] = $node->title;
  }
  $form['field_project'][LANGUAGE_NONE]['#options'] = $options;

  // Select the default session type.
  if (empty($form['field_session_type'][LANGUAGE_NONE]['#default_value'])) {
    $form['field_session_type'][LANGUAGE_NONE]['#default_value'] = variable_get('productivity_timewatch_default_session_type_tid');
  }
}

/**
 * Query DB for every user sessions, within month and year.
 *
 * @param uid
 *  The project id number.
 * @param $year
 *  The year to filter the issues.
 * @param $month
 *  The month to filter the issues.
 *
 * @return $node_keys
 *  All the nodes return from the query.
 */
function productivity_timewatch_get_user_sessions($uid, $year, $month, $non_regular_only = FALSE) {

  if ($month == 'all') {
    $project_start_month = format_string("01-01-@year", array('@year' => $year));
    $project_end_month = format_string("31-12-@year", array('@year' => $year));
  }
  else {
    $project_start_month = format_string("01-@month-@year", array(
      '@year' => $year,
      '@month' => $month
    ));
    $project_end_month = format_string("01-@month-@year", array(
      '@year' => ($month == 12) ? $year+1 : $year,
      '@month' => ($month == 12) ? 1 : ($month + 1),
    ));
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'work_session')
    ->fieldCondition('field_employee', 'target_id', $uid);

  if ($non_regular_only) {
    $tids = taxonomy_get_term_by_name('Regular', 'session_types');
    $query
      ->fieldCondition('field_session_type', 'tid',  array_keys($tids), 'NOT IN');
  }

  // Return all time.
  if ($year != 'all') {
    $query
      ->fieldCondition('field_session_date', 'value', strtotime($project_start_month), '>=')
      ->fieldCondition('field_session_date', 'value', strtotime($project_end_month), '<');
  }

  $result = $query->execute();

  if(empty($result['node'])) {
      return;
  }

  // TODO: This can timeout on users with a lot of sessions.
  return array_keys($result['node']);
}


/**
 * Query DB for every user sessions, within month and year.
 *
 * @param uid
 *  The project id number.
 * @param $year
 *  The year to filter the issues.
 * @param $month
 *  The month to filter the issues.
 *
 * @return $node_keys
 *  All the nodes return from the query.
 */
function productivity_timewatch_get_global_days($year, $month) {

  if ($month == 'all') {
    $project_start_month = format_string("01-01-@year", array('@year' => $year));
    $project_end_month = format_string("31-12-@year", array('@year' => $year));
  }
  else {
    $project_start_month = format_string("01-@month-@year", array(
      '@year' => $year,
      '@month' => $month
    ));
    $project_end_month = format_string("01-@month-@year", array(
      '@year' => ($month == 12) ? $year+1 : $year,
      '@month' => ($month == 12) ? 1 : ($month + 1),
    ));
  }

  // Get TID of global days.
  $tids = taxonomy_get_term_by_name('Funday', 'session_types');
  $tids += taxonomy_get_term_by_name('Holiday', 'session_types');
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'work_session')
    ->fieldCondition('field_session_type', 'tid', array_keys($tids), 'IN');

  // Return all time.
  if ($year != 'all') {
    $query
      ->fieldCondition('field_session_date', 'value', strtotime($project_start_month), '>=')
      ->fieldCondition('field_session_date', 'value', strtotime($project_end_month), '<');
  }

  $result = $query->execute();

  if(empty($result['node'])) {
    return;
  }

  $nodes =  node_load_multiple((array_keys($result['node'])));
  $bydate_result = array();
  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $day =  date('d', $node->field_session_date['und'][0]['value']);
    $day_key = str_pad($day, 2, '0', STR_PAD_LEFT);
    $bydate_result[$day_key]['type'] = $wrapper->field_session_type->label();
    $bydate_result[$day_key]['label'] = $wrapper->field_special_day_name->value();
    $bydate_result[$day_key]['start'] = $node->field_session_date['und'][0]['value'];
    $bydate_result[$day_key]['end'] = $node->field_session_date['und'][0]['value2'];
    $bydate_result[$day_key]['nid'] = $node->nid;
  }
  return $bydate_result;
}

